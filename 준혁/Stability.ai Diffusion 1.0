import base64
import io
import json
import logging
import boto3
from PIL import Image

from botocore.exceptions import ClientError

class ImageError(Exception):
    "Custom exception for errors returned by SDXL"
    def __init__(self, message):
        self.message = message


logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


def generate_image(model_id, body):
    """
    Generate an image using SDXL 1.0 on demand.
    Args:
        model_id (str): The model ID to use.
        body (str) : The request body to use.
    Returns:
        image_bytes (bytes): The image generated by the model.
    """

    logger.info("Generating image with SDXL model %s", model_id)

    bedrock = boto3.client(service_name='bedrock-runtime')
   
    accept = "application/json"
    content_type = "application/json"

    response = bedrock.invoke_model(
        body=body, modelId=model_id, accept=accept, contentType=content_type
    )
    response_body = json.loads(response.get("body").read())
    print(response_body['result'])

    base64_image = response_body.get("artifacts")[0].get("base64")
    base64_bytes = base64_image.encode('ascii')
    image_bytes = base64.b64decode(base64_bytes)

    finish_reason = response_body.get("artifacts")[0].get("finishReason")

    if finish_reason == 'ERROR' or finish_reason == 'CONTENT_FILTERED':
        raise ImageError(f"Image generation error. Error code is {finish_reason}")


    logger.info("Successfully generated image with the SDXL 1.0 model %s", model_id)

    return image_bytes



def resize_image(image_path, size=(1024, 1024)):
    """
    Resizes an image while maintaining the aspect ratio, and adds padding if necessary
    to fit the required size.
    Args:
        image_path (str): The path to the image to resize.
        size (tuple): The desired size to resize to.
    Returns:
        Image: The resized image.
    """
    with Image.open(image_path) as img:
        img.thumbnail(size, Image.LANCZOS)  # Maintains aspect ratio and resizes
        new_img = Image.new("RGBA", size)
        new_img.paste(img, ((size[0] - img.size[0]) // 2, (size[1] - img.size[1]) // 2))
        return new_img


def main():
    """
    Entrypoint for SDXL example.
    """

    logging.basicConfig(level = logging.INFO,
                        format = "%(levelname)s: %(message)s")

    model_id='stability.stable-diffusion-xl-v1'

    # 원본 이미지 경로
    init_image_path = "sample2.png"
    mask_image_path = "sample5.png"
    
    # 이미지 리사이즈 및 패딩 처리
    resized_init_image = resize_image(init_image_path)
    resized_mask_image = resize_image(mask_image_path)
    
    # 리사이즈된 이미지 저장
    resized_init_image.save("resized_sample2.png")
    resized_mask_image.save("resized_sample5.png")
    
    # 프롬프트 설정
    prompt = """
Please imagine and draw a picture of your past life using the face from the picture I provided. I am wearing a hanbok, a traditional Korean costume, with a blue sky in the background, a windy forest, and an 1800s hanok. Ensure that the face-to-body ratio is accurate and realistic, and make sure that the direction of the gaze and the orientation of the body are aligned and natural. This is an important part, so if you perform well, I'll give you a tip of 100.    """
    
    # 리사이즈된 이미지를 base64로 인코딩
    with open("resized_sample2.png", "rb") as image_file:
        init_image = base64.b64encode(image_file.read()).decode('utf8')
    with open("resized_sample5.png", "rb") as image_file_mask:
        mask_image = base64.b64encode(image_file_mask.read()).decode('utf8')

    # 요청 본문 생성
    body=json.dumps({
        "text_prompts": [
        {
        "text": prompt
        }
    ],
    "mask_source" : "MASK_IMAGE_BLACK",
    "init_image": init_image,
    "mask_image" : mask_image,
    "style_preset" : "photographic",
    "cfg_scale" : 24
    })

    try:
        image_bytes=generate_image(model_id = model_id, body = body)
        image = Image.open(io.BytesIO(image_bytes))
        image.show()
        image.save('result31.png')

    except ClientError as err:
        message=err.response["Error"]["Message"]
        logger.error("A client error occurred: %s", message)
        print("A client error occured: " + format(message))
    except ImageError as err:
        logger.error(err.message)
        print(err.message)

    else:
        print(f"Finished generating image with SDXL model {model_id}.")


if __name__ == "__main__":
    main()
